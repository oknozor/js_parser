WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
SEMI_COL = _{";"}
VAR = _{"var"}
program = { statement* }

// Statement
root = { statement+ }
statement = { (expression_statement | declaration_statement) ~ SEMI_COL? }
expression_statement = { expression }
declaration_statement = { variable_declaration }
variable_declaration = { VAR ~ variable_declarator+ }
variable_declarator = { identifier ~ ("=" ~ expression)? }


// Expressions
expression = { binary_expression| literal | assignment_expression }

assignment_expression = { identifier ~ assignment_operator ~ binary_expression+ }
assignment_operator = { "=" | "+=" | "-=" | "*=" |"/=" |"%=" |"<<=" | ">>=" |">>>="|"|=" |"^=" | "&=" }
/** Todo : handle left recursion or at least fix the possible left members of a bin op
 *  see https://github.com/PhilippeSigaud/Pegged/wiki/Left-Recursion
 */
binary_expression = { literal  ~ binary_operator ~ expression* }
binary_operator= { "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=" | "<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%" | "|" | "^" | "&" | "in" | "instanceof" }

// Literals
literal = { string | bool | number }
bool = { bool_true | bool_false }
bool_true = { "true" }
bool_false = { "false" }
string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = { float | integer }
integer = { ASCII_DIGIT+ }
float = { ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

identifier = { !( ASCII_DIGIT | " " | "\t" | VAR | SEMI_COL) ~ ANY }
